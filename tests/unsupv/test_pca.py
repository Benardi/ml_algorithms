import pytest
from numpy import array
from numpy.testing import assert_allclose

from touvlo.unsupv.pca import pca, project_data, recover_data


class TestPCA:

    @pytest.fixture(scope="module")
    def X(self):
        return array([[3.3816, 3.3891], [4.5279, 5.8542], [2.6557, 4.4120],
                      [2.7652, 3.7154], [2.8466, 4.1755], [3.8907, 6.4884],
                      [3.4758, 3.6328], [5.9113, 6.6808], [3.9289, 5.0984],
                      [4.5618, 5.6233], [4.5741, 5.3977], [4.3717, 5.4612],
                      [4.1917, 4.9547], [5.2441, 4.6615], [2.8358, 3.7680],
                      [5.6353, 6.3121], [4.6863, 5.6652], [2.8505, 4.6265],
                      [5.1102, 7.3632], [5.1826, 4.6465]])

    @pytest.fixture(scope="module")
    def X_norm(self):
        return array([[-0.7355666, -1.5469427], [0.3889539, 0.6867086],
                      [-1.4476480, -0.6200863], [-1.3401778, -1.2512740],
                      [-1.2603984, -0.8343736], [-0.2361359, 1.2613740],
                      [-0.6431157, -1.3260879], [1.7460772, 1.4357008],
                      [-0.1986405, 0.0019233], [0.4222683, 0.4775041],
                      [0.4342720, 0.2730388], [0.2357805, 0.3305910],
                      [0.0591634, -0.1283346], [1.0915481, -0.3940151],
                      [-1.2709146, -1.2036088], [1.4752959, 1.1016550],
                      [0.5443959, 0.5155085], [-1.2565203, -0.4257578],
                      [0.9601663, 2.0540643], [1.0311962, -0.4075875]])

    def test_pca1(self, X):
        U, S = pca(X)
        assert_allclose(U,
                        array([[-0.63104, -0.77575], [-0.77575, 0.63104]]),
                        rtol=0, atol=0.001, equal_nan=False)

        assert_allclose(S,
                        array([[44.87776, 0], [0, 0.30731]]),
                        rtol=0, atol=0.001, equal_nan=False)

    def test_pca2(self, X_norm):
        U, S = pca(X_norm)

        assert_allclose(U,
                        array([[-0.70711, -0.70711], [-0.70711, 0.70711]]),
                        rtol=0, atol=0.001, equal_nan=False)
        assert_allclose(S,
                        array([[1.62878, 0], [0, 0.27122]]),
                        rtol=0, atol=0.001, equal_nan=False)

    def test_project_data1(self, X):
        k = 1
        U = array([[-0.63104, -0.77575], [-0.77575, 0.63104]])

        assert_allclose(project_data(X, U, k),
                        array([[-4.7630], [-7.3987], [-5.0985], [-4.6272],
                               [-5.0354], [-7.4885], [-5.0116], [-8.9129],
                               [-6.4344], [-7.2410], [-7.0737], [-6.9952],
                               [-6.4887], [-6.9254], [-4.7126], [-8.4527],
                               [-7.3521], [-5.3878], [-8.9367], [-6.8749]]),
                        rtol=0, atol=0.001, equal_nan=False)

    def test_project_data2(self, X_norm):
        k = 1
        U = array([[-0.70711, -0.70711], [-0.70711, 0.70711]])

        assert_allclose(project_data(X_norm, U, k),
                        array([[1.613978], [-0.760608], [1.462109],
                               [1.832433], [1.481228], [-0.724953],
                               [1.392437], [-2.249857], [0.139100],
                               [-0.636235], [-0.500144], [-0.400485],
                               [0.048911], [-0.493230], [1.749752],
                               [-1.822179], [-0.749466], [1.189550],
                               [-2.131383], [-0.440958]]),
                        rtol=0, atol=0.001, equal_nan=False)

    def test_recover_data1(self, X):
        k = 1
        U = array([[-0.63104, -0.77575], [-0.77575, 0.63104]])
        Z = array([[-4.7630], [-7.3987], [-5.0985], [-4.6272],
                   [-5.0354], [-7.4885], [-5.0116], [-8.9129],
                   [-6.4344], [-7.2410], [-7.0737], [-6.9952],
                   [-6.4887], [-6.9254], [-4.7126], [-8.4527],
                   [-7.3521], [-5.3878], [-8.9367], [-6.8749]])

        assert_allclose(recover_data(Z, U, k),
                        array([[3.0056, 3.6949], [4.6688, 5.7395],
                               [3.2173, 3.9551], [2.9199, 3.5896],
                               [3.1775, 3.9063], [4.7255, 5.8093],
                               [3.1625, 3.8877], [5.6243, 6.9142],
                               [4.0603, 4.9915], [4.5693, 5.6172],
                               [4.4637, 5.4874], [4.4142, 5.4266],
                               [4.0946, 5.0337], [4.3702, 5.3724],
                               [2.9738, 3.6558], [5.3340, 6.5572],
                               [4.6394, 5.7034], [3.3999, 4.1796],
                               [5.6394, 6.9327], [4.3383, 5.3333]]),
                        rtol=0, atol=0.001, equal_nan=False)

    def test_recover_data2(self, X):
        k = 1
        U = array([[-0.70711, -0.70711], [-0.70711, 0.70711]])
        Z = array([[1.613978], [-0.760608], [1.462109],
                   [1.832433], [1.481228], [-0.724953],
                   [1.392437], [-2.249857], [0.139100],
                   [-0.636235], [-0.500144], [-0.400485],
                   [0.048911], [-0.493230], [1.749752],
                   [-1.822179], [-0.749466], [1.189550],
                   [-2.131383], [-0.440958]])

        assert_allclose(recover_data(Z, U, k),
                        array([[-1.141255, -1.141255],
                               [0.537831, 0.537831],
                               [-1.033867, -1.033867],
                               [-1.295726, -1.295726],
                               [-1.047386, -1.047386],
                               [0.512619, 0.512619],
                               [-0.984602, -0.984602],
                               [1.590889, 1.590889],
                               [-0.098359, -0.098359],
                               [0.449886, 0.449886],
                               [0.353655, 0.353655],
                               [0.283186, 0.283186],
                               [-0.034586, -0.034586],
                               [0.348767, 0.348767],
                               [-1.237262, -1.237262],
                               [1.288475, 1.288475],
                               [0.529952, 0.529952],
                               [-0.841139, -0.841139],
                               [1.507115, 1.507115],
                               [0.311804, 0.311804]]),
                        rtol=0, atol=0.001, equal_nan=False)
